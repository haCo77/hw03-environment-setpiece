// "Simple Campfire"

float noise(in vec3 x)
{
    return texture(iChannel0, x / 32.0).x;
}

float fbm(in vec3 p, in int imax)
{
    float d = 0.0;
    float amp = 0.5;
    for(int i = 0; i < imax; ++i){
        d += amp * noise(p);
        p *= 2.01;
        amp /= 2.0;
    }
    return d;
}

vec4 integrate(in vec4 sum, in float den, in float dis)
{
    den = 1.0 - exp(-0.04 * sqrt(den));
    vec4 col = vec4(den * vec3(1.0, 0.95, 0.9) * 0.2 + 0.8 * dis * vec3(1.0, 0.85, 0.6), den);
    col.xyz = clamp(col.xyz, 0.0, 1.0);
    return vec4(sum.xyz + col.xyz * (1.0 - sum.a), sum.a + col.a - sum.a * col.a);
}

float sdCappedCylinder(in vec3 p, in vec2 h)
{
    vec2 d = abs(vec2(length(p.xz), p.y)) - h;
    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
}

float firewood(in vec3 p) {
    vec2 h = vec2(0.15, 0.8);
    vec3 q1 = vec3(p.y - 0.15, p.z * 0.5 - p.x * 0.866, p.x * 0.866 + p.z * 0.5);
    vec3 q2 = vec3(q1.x, -q1.z, q1.y);
	return min(sdCappedCylinder(q1, h), sdCappedCylinder(q2, h)) - 0.1 * noise((q1 + q2) * 10.0) + 0.05;
}

vec3 calcNormal(in vec3 x, in float eps)
{
    vec2 e = vec2(eps, 0.0);
    return normalize(vec3(firewood(x + e.xyy) - firewood(x - e.xyy),
                            firewood(x + e.yxy) - firewood(x - e.yxy),
                            firewood(x + e.yyx) - firewood(x - e.yyx)));
}

float softshadow(in vec3 ro, in vec3 rd, in float mint, in float maxt, in float k)
{
    float res = 1.0;
    float t = mint;
    for(int i = 0; i < 32; i++)
    {
        float h = firewood(ro + rd * t);
        res = min(res, k * h / t);
        t += h;
        if(t > maxt) break;
    }
    return clamp(res, 0.0, 1.0);
}

vec4 raymarch(in vec3 ro, in vec3 rd)
{
    vec4 sum = vec4(0.0);
    float t = 0.0;
    
    // ground
    float tm = max(-ro.y / rd.y, 0.0);
    vec3 gc = vec3(0.35, 0.32, 0.3);
    int caseid = tm > 0.0? 1 : 0;
    vec3 gp = ro + tm * rd;
    
    // fire
    vec3 fc, wc;
    float glt = smoothstep(0.0, 0.6, fbm(vec3(0., 10.0 * iTime, 0.), 3)) * 0.5 + 0.5;
    float a = dot(rd.xz, rd.xz);
    float b = 2.0 * dot(ro.xz, rd.xz);
    float c = dot(ro.xz, ro.xz) - 0.64;
    float dt = b * b - 4.0 * a * c;
    if(dt > 0.0) {
        float tf1 = (-b - sqrt(dt)) / 2.0 / a;
        if(tf1 > 0.0) {
            if(caseid == 0) {
            	caseid = 2;
        	} else {
        		caseid = 3;
        	}
            float tf2 = (-b + sqrt(dt)) / 2.0 / a;
            float tf = tf1;
            float tf3 = 100.0;
            float denf = 0.0;
            for(int i = 0; i < 30; i++){ 
                vec3  pos = ro + tf * rd;
                if(pos.y < 0.0 || pos.y > 2.0 || sum.a > 0.99) 
                    break;
                float dp = fbm(9.1 * pos - vec3(0., iTime * 13.0, 0.), 5);
                float c = 1. - 16. * pow(max( 0., length(vec2(pos.x, pos.z - 0.2 * pos.y) * vec2(0.11 + 0.46 * pos.y)) - 0.9 * pos.y * dp * dp), 1.2);
                if(c * dp > 0.15) {
                    if(tf3 == 100.0)
                        tf3 = tf;
                }
                denf += c * dp;
                tf += 0.05;
                if(tf >= tf2) break;
            }
            float c1 = 0.05 * denf * (2.0 - pow(1.0 * (ro.y + tf1 * rd.y), 4.));
            c1 = clamp(c1,0.,1.);
            if(c1 < 0.1 || denf < 0.1) {
            	caseid -= 2;
                tf3 = 100.0;
            } else {
                fc = 1.6 * vec3(1.5*c1, 1.3*c1*c1, c1*c1*c1);
                tm = (tf1 + tf2) * 0.5;
        	}
            
            // firewood
            float tw = tf1;
            float dw;
            for(int i = 0; i < 30; ++i) {
                vec3 pos = ro + tw * rd;
            	dw = firewood(pos);
                if(dw < 0.0001) {
                    if(tw < tf3 || caseid < 2) {
                        tm = tw;
                        caseid = 4;
                        vec3 nor = calcNormal(pos, 0.01);
                        float dif1 = dot(normalize(vec3(0.0, 1.0, 0.5) - pos), nor);
                        wc = vec3(2.0) * (dif1 + 0.2) * glt * vec3(0.8, 0.45, 0.3);
                        break;
                    }
                }
                tw += dw;
                if(tw >= tf2 || tw >= tf3) break;
            }
        }
    }
    
    // fog
    float wtf = 1.638;
    if(caseid != 0) {
        for(int i = 0; i < 100; i++){
            if(t >= tm) break;
            vec3 pos = ro + t * rd; 
            if(pos.y < 0.0 || pos.y > 8.0 || sum.a > 0.99) 
                break;
            vec3 pos_ = pos - vec3(0.0, 0.0, iTime);
            float den = fbm(pos_, 3); 
            if(den > 0.01){
                float dis = abs(den - fbm(0.9 * pos_, 3));
                dis = clamp(dis, 0.0, 1.0);
                dis *= exp(-length(pos.xyz * vec3(1.0, 0.6, 1.0)) * wtf);
                sum = integrate(sum, den, dis); 
            } 
            t += max(0.06, 0.02 * t);
        }
        if(caseid == 2 || caseid == 3)
        {
            sum.xyz += (1.0 - sum.a) * fc;
        } else if(caseid == 1){
            float ang = fbm(2.1 * gp, 2);
            vec3 nor = normalize(vec3(0.5 * cos(16.28 * ang), 1.0, 0.5 * sin(16.28 * ang)));
            float dif1 = dot(normalize(vec3(-gp.x, 2.0, -gp.z)), nor);
            float dif2 = pow(normalize(vec3(-gp.x, 2.0, -gp.z)).y, 13.0);
            float res = softshadow(gp, normalize(vec3(-gp.x, 12.0 - 10.0 * glt, -gp.z + 1.3)), 0.01, 1.0, 2.0);
            res += softshadow(gp, normalize(vec3(-gp.x, 12.0 - 10.0 * glt, -gp.z + 0.3)), 0.01, 1.0, 2.0);
            res *= glt / 2.0;
            sum.xyz += (1.0 - sum.a) * (gc * (dif1 + 0.2) + 3.0 * dif2 * vec3(1.0, 0.85, 0.6)) * res;
        } else {
            sum.xyz += (1.0 - sum.a) * wc;
        }
        sum.w = 1.0;
    }
    else {
        for(int i = 0; i < 100; i++){ 
            vec3 pos = ro + t * rd; 
            if(pos.y < 0.0 || pos.y > 8.0 || sum.a > 0.99) 
                break; 
            vec3 pos_ = pos - vec3(0.0, 0.0, iTime);
            float den = fbm(pos_, 3); 
            if(den > 0.01){
                float dis = abs(den - fbm(0.9 * pos_, 3));
                dis = clamp(dis, 0.0, 1.0);
                dis *= exp(-length(pos.xyz * vec3(1.0, 0.6, 1.0)) * wtf);
                sum = integrate(sum, den, dis); 
            } 
            t += max(0.06, 0.02 * t);
        }
    }
    return clamp(sum, 0.0, 1.0);
}

mat3 setCamera(in vec3 ro, in vec3 ta, float cr)
{
    vec3 cw = normalize(ta - ro);
    vec3 cp = vec3(sin(cr), cos(cr),0.0);
    vec3 cu = normalize(cross(cw, cp));
    vec3 cv = normalize(cross(cu, cw));
    return mat3(cu, cv, cw);
}

vec4 render(in vec3 ro, in vec3 rd, in vec2 q)
{
    // sky
    vec3 col = mix(vec3(0.27, 0.40, 0.51), vec3(0.112, 0.141, 0.38), q.y + 0.2);
    
    vec4 res = raymarch(ro, rd);
    col = col*(1.0 - res.w) + res.xyz;
    
    return vec4(col, 1.0);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 q = fragCoord.xy / iResolution.xy;
    vec2 p = -1.0 + 2.0 * q;
    p.x *= iResolution.x / iResolution.y;
    vec2 m = iMouse.xy / iResolution.xy;
    
    vec3 ro = 3.0 * vec3(sin(6.283 * m.x + 1.57), 0.0, cos(6.283 * m.x + 1.57)) + vec3(0.0, 1.0, 0.0);
    vec3 ta = vec3(0.0, m.y + 1.0, 0.0);
    mat3 ca = setCamera(ro, ta, 0.0);

    vec3 rd = ca * normalize(vec3(p.xy, 1.5));
    vec4 col = render(ro, rd, q);
    
    // vigneting
    col *= 0.25 + 0.75 * pow(16.0 * q.x * q.y * (1.0 - q.x) * (1.0 - q.y), 0.5);
    fragColor = col;
}